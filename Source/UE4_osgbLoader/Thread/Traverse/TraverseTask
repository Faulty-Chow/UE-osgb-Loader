#pragma once
#include "../../UE4_osgbLoader.h"
#include "../BaseAsyncTask"
#include "CoreMinimal.h"

#include <vector>

class Pawn;
class Model;
class Geometry;
class PagedLOD;
/*
traverse 时控制深度 从 Pawn 周围开始更新
超过节点限制时
post-cull when traverse finish
*/
class UpdateModelTask :public BaseAsyncTask
{
public:
	UpdateModelTask(Model* model);
	~UpdateModelTask() = default;

	virtual void Abandon() override {}
	virtual int32 Execute() override;
	virtual void SaveResult() override {}

	void Traverse(PagedLOD* plod);
	// void UpdateActivePagedLOD(PagedLOD* plod);
	void Cull(PagedLOD* plod);
	void KeepIntact(PagedLOD* plod);
	void CheckGeometry();
	bool FindUseableSuccessors(PagedLOD* plod, std::vector<Geometry*>& successors);
	void FindUseablePredecessor(PagedLOD* plod, PagedLOD*& predecessor);

private:
	Model* _model;
	std::set<Geometry*> _renderNextFrame;
	std::vector<Geometry*> _UnuseableGeometries;
};