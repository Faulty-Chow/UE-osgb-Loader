#pragma once
#include "../UE4_osgbLoader.h"
#include "CoreMinimal.h"

#include <atomic>

class BaseThread : public FRunnable
{
public:
	BaseThread(FString threadName);
	virtual ~BaseThread();

public:
#ifdef _MSVC_LANG
#if _MSVC_LANG >= 201703L
	[[nodiscard]]
#endif 
#endif
	bool Create(FEvent* pStartEvent, uint32 stackSize = (32 * 1024), EThreadPriority threadPriority = TPri_Normal);
	void StartThread();
	void StopThread(bool bShouldWait = true);

	void Wakeup();
	virtual bool SetTask(void* task) = 0;

	__forceinline bool IsDone() { return _bDead.load(); }
	__forceinline bool IsActive() { return _bActive.load(); }
	__forceinline bool IsFinish() { return _bFinish.load(); }

protected:
	virtual uint32 Run() override;
	virtual void ExecuteTask() = 0;

	template<typename Lambda>
	static void DoInGameThread(Lambda&& task)
	{
		if (IsInGameThread())
			task();
		else
		{
			FFunctionGraphTask::CreateAndDispatchWhenReady(
				[task]()
				{
					task();
				}, 
				TStatId(), nullptr, ENamedThreads::GameThread);
		}
	}

private:
	virtual bool Init() override { return FRunnable::Init(); }
	virtual void Stop() override { FRunnable::Stop(); }
	virtual void Exit() override { FRunnable::Exit(); }

protected:
	FString _threadName;
	FRunnableThread* _pThread;

	FEvent* _pWakeupEvent;
	FEvent* _pStartEvent;

	std::atomic_bool _bFinish;
	std::atomic_bool _bActive;
	std::atomic_bool _bDead;
};