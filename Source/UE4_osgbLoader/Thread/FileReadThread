#pragma once
#include "TaskThread"
#include <functional>
#include <set>

class FileReadTask final :public BaseTask
{
public:
	FileReadTask(class PagedLOD* plod, std::string filePath) :
		_frameNumberLastRequest(-1), _plod(plod),
		_filePath(filePath), _bAllowLoad(true), _bReload(false) {}
	virtual void Execute() override;
	virtual void Abandon() {}
	bool operator < (const FileReadTask& rhs) const;
	bool operator == (const FileReadTask& rhs) const;

public:
	int64 _frameNumberLastRequest;
	class PagedLOD* _plod;
	std::string _filePath;
	bool _bAllowLoad;
	bool _bReload;
};

class FileReadThread :public TaskThread
{
	friend class FileReadTask;
public:
	FileReadThread(class RuntimeOsgbLoaderThreadPool* pThreadPool, FString threadName);

private:
	virtual bool ReturnToPool() override;

};