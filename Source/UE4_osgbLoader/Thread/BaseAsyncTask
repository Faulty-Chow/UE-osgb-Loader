#pragma once
#include "../UE4_osgbLoader.h"
#include "CoreMinimal.h"

#include <set>

class BaseAsyncTask
{
public:
	virtual void Abandon() = 0;
	virtual int32 Execute() = 0;
	virtual void SaveResult() = 0;
};

/*		
1. read ndoe file
2. new pagedLOD
3. gamethread new texture and material
4. set texture and material, then add to database
*/

/*
1. traverse active pagedLOD
	1.1. need heigher
		1.1.1. heigher LOD is ready, then add it to view and remove self
		1.1.2. need to read
	1.2. stay
	1.3. need lower
		1.3.1. lower LOD is ready, then add it to view and remove self
		1.3.2. need to read
*/
class PagedLOD;
class TraverseActivePagedLOD :public BaseAsyncTask
{
public:
	virtual void Abandon() override
	{
		UE_LOG(LogTemp, Warning, TEXT("Try to abandon a task that can't be abandoned."))
	}
	virtual int32 Execute() override;
	virtual void SaveResult() override;
private:
	std::set<PagedLOD*>& _activePagedLODs;
};

class Model;
class CleanCache :public BaseAsyncTask
{
public:
	virtual void Abandon() override
	{
		_bAbandon.exchange(true);
	}
	virtual int32 Execute() override;
	virtual void SaveResult() override;

	void DFS(PagedLOD* plod);
private:
	std::atomic_bool _bAbandon;
	Model* _model;
	int64 _recycleFrameout;
	int32 _releaseNum;
};

