#pragma once

#include "CoreMinimal.h"

#include <osg/Node>

#include <vector>

class Geometry;
class PagedLOD;

class Model
{
public:
	class ViewUpdateRequest :public osg::Referenced
	{
	public:
		bool operator==(const ViewUpdateRequest& rhs)	const;
		bool operator<  (const ViewUpdateRequest& rhs)	const;
	public:
		float pixelSize;
		unsigned int requestTimes;
		osg::ref_ptr<Geometry> _requester;
		bool _bRequestHeigher;
		std::vector<osg::ref_ptr<Geometry>> _addToViewGeometries;
		std::vector<osg::ref_ptr<Geometry>> _deleteFromViewGeometries;
	};

	Model(std::string folderPath);
	Model(std::string folderPath, osg::Node* root);
	~Model();

public:
	void UpdateGeometries();

	bool _isVaild;

	std::string _folderPath;
	PagedLOD* _root;

	std::vector<Geometry*> _addToViewList;
	std::vector<Geometry*> _removeFromViewList;
	std::set<Geometry*> _visibleGeometries;

	int64 _frameNumberLastClean;

	class FileReadTask* _fileReadTask;
};